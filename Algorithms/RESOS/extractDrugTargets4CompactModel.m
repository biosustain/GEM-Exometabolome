function [KOTargets,Targets2Activate] = extractDrugTargets4CompactModel(model_compacted,modelLoopless,placeboReactionsMode,treatedReactionsMode,tolerance4mode)
%%%%%%%%%%%%%%%%%%%%%%%%Fernando Silva-Lance 2021 %%%%%%%%%%%%%%%%%%%%%%%%%%
    %Function for treating the data related to the targets of prostacycline
    %drug
    %Determines if a reaction is active or inactive based on the mode given
    %by a sampling.
 %NOTE: THEIS SCRIPT ONLY WORKS WITH THE FILE NAMED TargetsData.xlsx , TRY
 %TO CHANGE THE LEAST POSSIBLE THAT FILE
%Extract active or inactive reactions according to CiMAT
if ~exist('tolerance4mode','var')
    tolerance4mode = 1e-5;
end
    %Determine state of a reaction in placebo
        ActiveReactionsPlacebo    = model_compacted.rxns(placeboReactionsMode > tolerance4mode | placeboReactionsMode < -tolerance4mode,1);
        NotActiveReactionsPlacebo = model_compacted.rxns((placeboReactionsMode >= 0 & placeboReactionsMode < tolerance4mode) | (placeboReactionsMode<= 0 & placeboReactionsMode > -tolerance4mode),1);
    %Determine state if reaction in treated
        TreatedActiveReactions    = model_compacted.rxns(treatedReactionsMode > tolerance4mode | treatedReactionsMode < -tolerance4mode,1);
        TreatedNotActiveReactions =  model_compacted.rxns((treatedReactionsMode >= 0 & treatedReactionsMode < tolerance4mode) | (treatedReactionsMode<= 0 & treatedReactionsMode > -tolerance4mode),1);
        
        
     %%%%%%%%% IMPORTANT STEP  
    %Finding which reactions are inactive in placebo but active in treated,
    %this array is used in the end
        inactive2active = intersect(NotActiveReactionsPlacebo,TreatedActiveReactions);
    %Finding which reactions are active in placebo but inactive in treated,
    %this array is used in the end    
        active2inactive = intersect(ActiveReactionsPlacebo,TreatedNotActiveReactions);
     %%%%%%%%%%   
        
model = model_compacted;
%Find targets in the reaction sets of a compacted model
        %Read Targets Data
            Targets = readcell('TargetsData.xlsx');
            Targets = Targets(:,1:3);
        %Eliminate those target reactions belonging to loops
            TargetsLoopless = Targets(ismember(Targets(:,1),modelLoopless.rxns),:);
            Targets         = TargetsLoopless;

        % Recover the targets that only have an inactivation effect, this part
        % checks the reaction set that contains that target reaction.
               tempKOtargets   = cell2table(Targets(2:end,:));
               tempKOtargets   = tempKOtargets(tempKOtargets.Var2 == 0 & tempKOtargets.Var3  == 1,:);
               tempKOtargets   = table2cell(tempKOtargets);
                counter = 1;
                %Find targets within reaction sets
                     for i = 1:size(model.rxns,1)
                        currentSet = split(model.rxns(i),'@');
                        if sum(ismember(currentSet,tempKOtargets(:,1))) > 0
                            KOTargetsCompacted(counter,1) = model.rxns(i);
                            counter = counter + 1;
                        end
                     end  
                KOTargetsCompacted = unique(KOTargetsCompacted);

        % Recover the targets that only have an activation effect, this part
        % checks the reaction set that contains that target reaction.     
           tempActivetargets   = cell2table(Targets(2:end,:));
           tempActivetargets   = tempActivetargets(tempActivetargets.Var2 == 1 & tempActivetargets.Var3  == 0,:);
           tempActivetargets   = table2cell(tempActivetargets); 
            counter = 1;
            %Find targets within reaction sets
                 for i = 1:size(model.rxns,1)
                    currentSet = split(model.rxns(i),'@');
                    if sum(ismember(currentSet,tempActivetargets(:,1))) > 0
                        ActiveTargetsCompacted(counter,1) = model.rxns(i);
                        counter = counter + 1;
                    end
                 end  
            ActiveTargetsCompacted = unique(ActiveTargetsCompacted);

        % Recover the targets that only have both effects, this part
        % checks the reaction set(group of reactions generated by the compact
        % model) that contains that target reaction.   

           tempBothTargets   = cell2table(Targets(2:end,:));
           tempBothTargets   = tempBothTargets(tempBothTargets.Var2 == 1 & tempBothTargets.Var3  == 1,:);
           tempBothTargets   = table2cell(tempBothTargets);
            counter = 1;
            %Find targets within reaction sets
                 for i = 1:size(model.rxns,1)
                    currentSet = split(model.rxns(i),'@');
                    if sum(ismember(currentSet,tempBothTargets(:,1))) > 0
                        BothTargetsCompacted(counter,1) = model.rxns(i);
                        counter = counter + 1;
                    end
                 end  
            BothTargetsCompacted = unique(BothTargetsCompacted);
    
 % Intersect targets with active and inactive reactions according to the mode of each reaction given
 % by the individual samplings.
     % This is done to eliminate unnecessary tests. 
     % For example, we have a certain target reaction that is activated by
     % the drug, if the reaction is already active in the placebo, then the simulation is
     % unnecesary
 %Reactions to activate
     vector4indexingActives     = (1:size(ActiveTargetsCompacted,1))';
                %Find targets that have an activation effect but are not
                %already active in the placebo
                        [~,idx]     = intersect(ActiveTargetsCompacted,ActiveReactionsPlacebo);
                   Targets2Activate = ActiveTargetsCompacted(~ismember(vector4indexingActives,idx),1);
               
 %Reactions to inactivate              
    vector4indexingInactives        = (1:size(KOTargetsCompacted,1))';
                %Find targets that have an inactivation effect but are not
                %already inactive in the placebo    
                              [~,idx]       = intersect(KOTargetsCompacted,NotActiveReactionsPlacebo);
                   Targets2Inactivate       = KOTargetsCompacted(~ismember(vector4indexingInactives,idx),1); 
           
%For targets that have activation and inactivation effect, the final expression state will be based on their
%original expression state. For example
        %Expression state according to mode    Activate    Inactivate  Outcome
            % -1                                      1          -1         1  (Activate)
            %  1                                      1          -1         -1  (Inactivate)
            
               vector4indexing     = (1:size(BothTargetsCompacted,1))';
      
                       [~,idx]     = intersect(BothTargetsCompacted,ActiveReactionsPlacebo);
               tempInactivate      = BothTargetsCompacted(~ismember(vector4indexing,idx),1);
               
                    [~,idx]        = intersect(BothTargetsCompacted,NotActiveReactionsPlacebo);
               tempActivate        = BothTargetsCompacted(~ismember(vector4indexing,idx),1);
               
    
    KOTargets             = [Targets2Inactivate;tempInactivate];
    Targets2Activate      = [Targets2Activate;tempActivate];
    
    %Intersecting with the following two arrays: active2inactive,
    %inactive2active. Finds which reactions are in the need of activation
    %or activation, according to their state from placebo to drug
    KOTargets        = intersect(KOTargets,active2inactive);
    Targets2Activate = intersect(Targets2Activate,inactive2active);
end