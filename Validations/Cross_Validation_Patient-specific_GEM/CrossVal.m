% Cross-validation
% The code load files generated by other codes
initCobraToolbox
load('Cross-Validation_Initial_Work_Space.mat');
sampling_list = readtable('SamplingList_Individuals.xls');
save_models = 1;

% Sampling parameters
initial_sample = 1;
fina_sample = 95; % width(sampling_list);

n_points = length(model_annotation.rxns);
max_time = 600;
max_steps = 1000;
bias = [];
threats = [];
check_points = length(model_annotation.rxns);

% Routine
[~, metabolite_index] = ismember(metabolite_names, model_annotation.rxns);
n_patients = width(sampling_list);
n_exp_met = height(sampling_list);

cross_validation_table = cell(n_exp_met,n_patients);

for i=initial_sample:fina_sample %n_patients
    load(strcat('modelPatient_Sampled_',num2str(i),'_Mean.mat')); % load the patient_ith-GEM
    reference_sampling = sampleMetaOutC.points;
    ith_model = sampleMetaOutC; % rmfield(sampleMetaOutC, {'C','d','dsense','A','internal','warmupPts','steps','points'});   
    for j=1:n_exp_met
        filename = sprintf('Model_P%d-M%d.mat', i, j);
        if ~isfile(filename)
            % Sampling the ith patient removing the constraints of the jth metabolite 
            jthModel = changeRxnBounds(ith_model, metabolite_names(j), 100, 'u');
            jthModel = changeRxnBounds(jthModel, metabolite_names(j), -100, 'l');
            % [jth_sample, ~] = gpSampler(jthModel, n_points, bias, max_time, max_steps,threats, check_points); % minimum sampling points = 2*x number of reactions
            [jth_sample, ~] = gpSampler_unrestricted(jthModel, n_points, bias, max_time, max_steps,threats, check_points);% RESOS algorithm indicates tha 50% of the default sampling points is enough, the unrestricted gpsampler allows to use values lower than default 
            % Save results in mat files
            jth_sample = rmfield(jth_sample, 'warmupPts');
            if save_models == 1            
                save(filename, 'jth_sample');
            end
        else
            load(filename);
        end
        % Compare results with the reference model & statistics
        jth_sampling = jth_sample.points(metabolite_index(j),:);
        ith_sampling_ref = reference_sampling(metabolite_index(j),:);
        jth_validation = zeros(1,9);
        if sum(abs(jth_sampling))==0
            jth_validation(1,1)=1; % h from t-test
        else
            [h,s,ci,stats]= ttest2(ith_sampling_ref,jth_sampling); %h=test, s=p-val
            jth_validation(1,1)=h; % h from t-test
            jth_validation(1,2)=s; % p val t-test 
            jth_validation(1,3)=ci(1); % min val conf int t-test
            jth_validation(1,4)=ci(2); % max val conf int t-test
            jth_validation(1,5)=stats.sd; % sd t-test
            jth_validation(1,6)=mean(jth_sampling); % mean population unconst
            jth_validation(1,7)=std(jth_sampling); % sd population unconst
            jth_validation(1,8)=mean(ith_sampling_ref); % mean population ref
            jth_validation(1,9)=std(ith_sampling_ref); % sd population ref        
        end     
        i
        j
        cross_validation_table{j,i} =  jth_validation;
    end
end

filename = sprintf('Cross_validation_table_%d-%d.mat', initial_sample, fina_sample);
save(filename, 'cross_validation_table')

